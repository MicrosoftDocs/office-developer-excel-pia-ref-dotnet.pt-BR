<Type Name="CalculatedMembers" FullName="Microsoft.Office.Interop.Excel.CalculatedMembers">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="953e871a40c21fce56f87ab1a7241017eaeb4ca0" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pt-BR" />
    <Meta Name="ms.lasthandoff" Value="09/03/2018" />
    <Meta Name="ms.locfileid" Value="20572832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface CalculatedMembers : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract CalculatedMembers implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.CalculatedMembers" />
  <TypeSignature Language="VB.NET" Value="Public Interface CalculatedMembers&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class CalculatedMembers : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024454-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d95f5-101">Uma coleção de todos os <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" /> objetos na tabela dinâmica especificada.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d95f5-101">A collection of all the <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" /> objects on the specified PivotTable.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="d95f5-102">
        <para>Cada <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" /> objeto representa um membro calculado ou uma medida calculada.</para>
        <para>Uso o <see cref="P:Microsoft.Office.Interop.Excel.PivotTable.CalculatedMembers" /> propriedade do <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> objeto para retornar um <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMembers" /> conjunto.</para>
        <para></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="d95f5-102">
          <para>Each <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" /> object represents a calculated member or calculated measure.</para>
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel.PivotTable.CalculatedMembers" /> property of the <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> object to return a <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMembers" /> collection.</para>
          <para></para>
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CalculatedMember this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CalculatedMember _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As CalculatedMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::CalculatedMember ^ default[System::Object ^] { Microsoft::Office::Interop::Excel::CalculatedMember ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CalculatedMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>
          <span data-ttu-id="d95f5-103">Reservado para uso interno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-103">Reserved for internal use.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CalculatedMember Add (string Name, string Formula, object SolveOrder, object Type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.CalculatedMember Add([in]string Name, [in]string Formula, [in]object SolveOrder, [in]object Type) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.CalculatedMembers.Add(System.String,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Name As String, Formula As String, Optional SolveOrder As Object, Optional Type As Object) As CalculatedMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2085)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CalculatedMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Name" Type="System.String" />
        <Parameter Name="Formula" Type="System.String" />
        <Parameter Name="SolveOrder" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Name">
          <span data-ttu-id="d95f5-104">
            <b>String</b> necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-104">Required <b>String</b>.</span>
          </span>
          <span data-ttu-id="d95f5-105">O nome do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-105">The name of the calculated member.</span>
          </span>
        </param>
        <param name="Formula">
          <span data-ttu-id="d95f5-106">
            <b>String</b> necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-106">Required <b>String</b>.</span>
          </span>
          <span data-ttu-id="d95f5-107">A fórmula do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-107">The formula of the calculated member.</span>
          </span>
        </param>
        <param name="SolveOrder">
          <span data-ttu-id="d95f5-108">
            <b>Objeto</b>de opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-108">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="d95f5-109">A ordem de resolução do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-109">The solve order for the calculated member.</span>
          </span>
        </param>
        <param name="Type">
          <span data-ttu-id="d95f5-110">
            <b>Objeto</b>de opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-110">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="d95f5-111">O tipo do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-111">The type of calculated member.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d95f5-112">Adiciona um campo calculado ou item calculado em uma tabela dinâmica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-112">Adds a calculated field or calculated item to a PivotTable.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <span data-ttu-id="d95f5-113">
            <para>O <paramref name="Formula" /> argumento deve ter uma instrução de sintaxe MDX (multidimensional expression) válida. O <paramref name="Name" /> argumento deve ser aceitável pelo provedor Online Analytical Processing (OLAP) e o <paramref name="Type" /> argumento deve ser definido.</para>
            <para>Se você definir o <paramref name="Type" /> argumento deste método para <paramref name="xlCalculatedSet" />, e em seguida, você deve chamar o <see cref="M:Microsoft.Office.Interop.Excel.CubeFields.AddSet(System.String,System.String)" /> método para tornar o novo campo definir visível na tabela dinâmica.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-113">
              <para>The <paramref name="Formula" /> argument must have a valid MDX (multidimensional expression) syntax statement. The <paramref name="Name" /> argument has to be acceptable to the Online Analytical Processing (OLAP) provider and the <paramref name="Type" /> argument has to be defined.</para>
              <para>If you set the <paramref name="Type" /> argument of this method to <paramref name="xlCalculatedSet" />, then you must call the <see cref="M:Microsoft.Office.Interop.Excel.CubeFields.AddSet(System.String,System.String)" /> method to make the new field set visible in the PivotTable.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add2">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CalculatedMember Add2 (string Name, object Formula, object SolveOrder, object Type, object Dynamic, object DisplayFolder, object HierarchizeDistinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.CalculatedMember Add2([in]string Name, [in]object Formula, [in]object SolveOrder, [in]object Type, [in]object Dynamic, [in]object DisplayFolder, [in]object HierarchizeDistinct) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.CalculatedMembers.Add2(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add2 (Name As String, Formula As Object, Optional SolveOrder As Object, Optional Type As Object, Optional Dynamic As Object, Optional DisplayFolder As Object, Optional HierarchizeDistinct As Object) As CalculatedMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CalculatedMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Name" Type="System.String" />
        <Parameter Name="Formula" Type="System.Object" />
        <Parameter Name="SolveOrder" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Dynamic" Type="System.Object" />
        <Parameter Name="DisplayFolder" Type="System.Object" />
        <Parameter Name="HierarchizeDistinct" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Name">To be added.</param>
        <param name="Formula">To be added.</param>
        <param name="SolveOrder">To be added.</param>
        <param name="Type">To be added.</param>
        <param name="Dynamic">To be added.</param>
        <param name="DisplayFolder">To be added.</param>
        <param name="HierarchizeDistinct">To be added.</param>
        <summary>
          <span data-ttu-id="d95f5-114">Reservado para uso interno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-114">Reserved for internal use.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d95f5-115">Retorna <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-115">Returns <see cref="T:Microsoft.Office.Interop.Excel.CalculatedMember" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCalculatedMember">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CalculatedMember AddCalculatedMember (string Name, object Formula, object SolveOrder, object Type, object DisplayFolder, object MeasureGroup, object ParentHierarchy, object ParentMember, object NumberFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.CalculatedMember AddCalculatedMember([in]string Name, [in]object Formula, [in]object SolveOrder, [in]object Type, [in]object DisplayFolder, [in]object MeasureGroup, [in]object ParentHierarchy, [in]object ParentMember, [in]object NumberFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.CalculatedMembers.AddCalculatedMember(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCalculatedMember (Name As String, Formula As Object, Optional SolveOrder As Object, Optional Type As Object, Optional DisplayFolder As Object, Optional MeasureGroup As Object, Optional ParentHierarchy As Object, Optional ParentMember As Object, Optional NumberFormat As Object) As CalculatedMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3091)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CalculatedMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Name" Type="System.String" />
        <Parameter Name="Formula" Type="System.Object" />
        <Parameter Name="SolveOrder" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="DisplayFolder" Type="System.Object" />
        <Parameter Name="MeasureGroup" Type="System.Object" />
        <Parameter Name="ParentHierarchy" Type="System.Object" />
        <Parameter Name="ParentMember" Type="System.Object" />
        <Parameter Name="NumberFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Name">
          <span data-ttu-id="d95f5-116">O nome do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-116">The name of the calculated member.</span>
          </span>
        </param>
        <param name="Formula">
          <span data-ttu-id="d95f5-117">A fórmula do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-117">The formula of the calculated member.</span>
          </span>
        </param>
        <param name="SolveOrder">
          <span data-ttu-id="d95f5-118">A ordem de resolução do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-118">The solve order for the calculated member.</span>
          </span>
        </param>
        <param name="Type">
          <span data-ttu-id="d95f5-119">O tipo do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-119">The type of calculated member.</span>
          </span>
        </param>
        <param name="DisplayFolder">
          <span data-ttu-id="d95f5-120">Uma pasta que existe para exibir as medidas calculadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-120">A folder that exists to display calculated measures.</span>
          </span>
        </param>
        <param name="MeasureGroup">
          <span data-ttu-id="d95f5-121">O grupo ao qual pertence o calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-121">The group to which the calculated belongs.</span>
          </span>
        </param>
        <param name="ParentHierarchy">
          <span data-ttu-id="d95f5-122">O caminho do pai do <b>ParentMember</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-122">The parent path of the <b>ParentMember</b>.</span>
          </span>
        </param>
        <param name="ParentMember">
          <span data-ttu-id="d95f5-123">O pai do membro calculado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-123">The parent of the calculated member.</span>
          </span>
        </param>
        <param name="NumberFormat">
          <span data-ttu-id="d95f5-124">O formato dos números usados para membros calculados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-124">The format of numbers used for calculated members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d95f5-125">Adiciona um campo calculado ou item calculado em uma tabela dinâmica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-125">Adds a calculated field or calculated item to a PivotTable.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <span data-ttu-id="d95f5-126">
            <para>O argumento de <b>fórmula</b> deve ter uma instrução de sintaxe válida MDX (multidimensional expression). O argumento <b>Name</b> deve ser aceitável para o provedor Online Analytical Processing (OLAP).</para>
            <list type="bullet">
              <item>
                <description>
                  <b>DisplayFolder</b>: pastas de exibição somente são válidas para medidas calculadas. Eles não são válidos para membros calculados. A cadeia de caracteres pode ter um ponto e vírgula; nela. Ponto e vírgula designa várias pastas de exibição. Por exemplo, se você usar a cadeia de caracteres minha folder1; myfolder2 e em seguida, a medida calculada mostrará em dois exibição pastas um nomeado myfolder1 a outros nomeado 'myfolder2'. A cadeia de caracteres pode ter barras invertidas \. Isso designa um caminho hierárquico da pasta de exibição. Por exemplo, se você usar o welcome\to\seattle de cadeia de caracteres, haverá uma pasta de exibição chamada boas-vindas que contenha uma pasta de exibição chamado para que contém uma pasta de exibição chamada seattle. Pastas de exibição são pastas virtuais.  Eles realmente não existem no mesmo sentido que pensamos das pastas do sistema. Eles existem somente para fins de exibindo as medidas calculadas.</description>
              </item>
              <item>
                <description>
                  <b>NumberFormat</b>: os formatos de número só podem ser definidos por macros. Não há nenhuma interface de usuário para configurá-las. Esta é a única propriedade que não pode ser definida por meio da interface do usuário. O tipo é sempre <b>xlNumberFormatTypeDefault</b> quando um membro calculado é criado por meio da interface do usuário. Os formatos de número somente são válidos para membros calculados. Eles não são válidos para medidas calculadas.</description>
              </item>
              <item>
                <description>
                  <b>ParentHierarchy</b>: hierarquia pai pode ser qualquer hierarquia MDX válido. Hierarquias pai somente são válidas para membros calculados. Eles não são válidos para medidas calculadas. Se um membro pai for escolhido, que está em uma hierarquia pai diferentes, a hierarquia pai será automaticamente alterada para coincidir com a hierarquia do pai do membro pai.</description>
              </item>
            </list>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-126">
              <para>The <b>Formula</b> argument must have a valid MDX (multidimensional expression) syntax statement. The <b>Name</b> argument has to be acceptable to the Online Analytical Processing (OLAP) provider.</para>
              <list type="bullet">
                <item>
                  <description>
                    <b>DisplayFolder</b>: Display folders are only valid for calculated measures. They are not valid for calculated members. The string can have semicolons ; in it. Semicolons designate multiple display folders. For example, if you use the string my folder1;myfolder2 then the calculated measure will show in two display folders one named myfolder1 the other named ‘myfolder2’. The string can have backslashes \. This designates a hierarchical path for the display folder. For example, if you use the string welcome\to\seattle there will be a display folder called welcome that contains a display folder called to which contains a display folder called seattle. Display folders are virtual folders.  They do not really exist in the same sense that we think of system folders. They only exist for purposes of displaying the calculated measures.</description>
                </item>
                <item>
                  <description>
                    <b>NumberFormat</b>: The number formats can only be set by macros. There is no user interface for setting them. This is the only property that cannot be set via the user interface. The type is always <b>xlNumberFormatTypeDefault</b> when a calculated member is created via the user interface. The number formats are only valid for calculated members. They are not valid for calculated measures.</description>
                </item>
                <item>
                  <description>
                    <b>ParentHierarchy</b>: The parent hierarchy can be any valid MDX hierarchy. Parent hierarchies are only valid for calculated members. They are not valid for calculated measures. If a parent member is chosen that is in a different parent hierarchy, the parent hierarchy will be automatically changed to match the parent hierarchy of the parent member.</description>
                </item>
              </list>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d95f5-127">Retorna um <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object que representa o aplicativo Microsoft Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-127">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d95f5-128">Retorna o número de objetos na coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-128">Returns the number of objects in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d95f5-129">Retorna um inteiro de 32 bits que indica o aplicativo no qual esse objeto foi criado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-129">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="d95f5-130">
            <para>Se o objeto foi criado no Microsoft Excel, essa propriedade retorna a cadeia de caracteres XCEL, que é equivalente à c. 5843454 número hexadecimal</para> Propriedade 
          <para>o <b>criador</b> foi projetada para ser usado no Microsoft Excel para Macintosh, onde cada aplicativo possui um código de criador de quatro caracteres. Por exemplo, o Microsoft Excel tem o código de criador XCEL.</para><para></para></span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-130">
              <para>If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</para>
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.CalculatedMembers.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CalculatedMember Item[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CalculatedMember Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item(Index As Object) As CalculatedMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::CalculatedMember ^ Item[System::Object ^] { Microsoft::Office::Interop::Excel::CalculatedMember ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CalculatedMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="d95f5-131">
            <b>Objeto</b>necessário.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-131">Required <b>Object</b>.</span>
          </span>
          <span data-ttu-id="d95f5-132">O nome ou número de índice do objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-132">The name or index number of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d95f5-133">Retorna um único objeto de uma coleção.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-133">Returns a single object from a collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.CalculatedMembers.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d95f5-134">Retorna o objeto pai para o objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d95f5-134">Returns the parent object for the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>